/* eslint-disable */
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { __extends } from "tslib";
import * as url from "url";
import * as portableFetch from "portable-fetch";
var BASE_PATH = "http://localhost:8088".replace(/\/+$/, "");
/**
 *
 * @export
 */
export var COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
export { BaseAPI };
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
export { RequiredError };
/**
 * @export
 * @namespace AllOrdersOrderDto
 */
export var AllOrdersOrderDto;
(function (AllOrdersOrderDto) {
    /**
     * @export
     * @enum {string}
     */
    var OrderStateEnum;
    (function (OrderStateEnum) {
        OrderStateEnum[OrderStateEnum["CREATED"] = 'CREATED'] = "CREATED";
        OrderStateEnum[OrderStateEnum["ORDERING"] = 'ORDERING'] = "ORDERING";
        OrderStateEnum[OrderStateEnum["ORDERED"] = 'ORDERED'] = "ORDERED";
        OrderStateEnum[OrderStateEnum["DELIVERED"] = 'DELIVERED'] = "DELIVERED";
        OrderStateEnum[OrderStateEnum["REJECTED"] = 'REJECTED'] = "REJECTED";
    })(OrderStateEnum = AllOrdersOrderDto.OrderStateEnum || (AllOrdersOrderDto.OrderStateEnum = {}));
})(AllOrdersOrderDto || (AllOrdersOrderDto = {}));
/**
 * @export
 * @namespace EditResponseOrderDto
 */
export var EditResponseOrderDto;
(function (EditResponseOrderDto) {
    /**
     * @export
     * @enum {string}
     */
    var OrderStateEnum;
    (function (OrderStateEnum) {
        OrderStateEnum[OrderStateEnum["CREATED"] = 'CREATED'] = "CREATED";
        OrderStateEnum[OrderStateEnum["ORDERING"] = 'ORDERING'] = "ORDERING";
        OrderStateEnum[OrderStateEnum["ORDERED"] = 'ORDERED'] = "ORDERED";
        OrderStateEnum[OrderStateEnum["DELIVERED"] = 'DELIVERED'] = "DELIVERED";
        OrderStateEnum[OrderStateEnum["REJECTED"] = 'REJECTED'] = "REJECTED";
    })(OrderStateEnum = EditResponseOrderDto.OrderStateEnum || (EditResponseOrderDto.OrderStateEnum = {}));
})(EditResponseOrderDto || (EditResponseOrderDto = {}));
/**
 * @export
 * @namespace OrderEntryDto
 */
export var OrderEntryDto;
(function (OrderEntryDto) {
    /**
     * @export
     * @enum {string}
     */
    var OrderStateEnum;
    (function (OrderStateEnum) {
        OrderStateEnum[OrderStateEnum["CREATED"] = 'CREATED'] = "CREATED";
        OrderStateEnum[OrderStateEnum["ORDERING"] = 'ORDERING'] = "ORDERING";
        OrderStateEnum[OrderStateEnum["ORDERED"] = 'ORDERED'] = "ORDERED";
        OrderStateEnum[OrderStateEnum["DELIVERED"] = 'DELIVERED'] = "DELIVERED";
        OrderStateEnum[OrderStateEnum["REJECTED"] = 'REJECTED'] = "REJECTED";
    })(OrderStateEnum = OrderEntryDto.OrderStateEnum || (OrderEntryDto.OrderStateEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    var PaymentStatusEnum;
    (function (PaymentStatusEnum) {
        PaymentStatusEnum[PaymentStatusEnum["UNPAID"] = 'UNPAID'] = "UNPAID";
        PaymentStatusEnum[PaymentStatusEnum["MARKED"] = 'MARKED'] = "MARKED";
        PaymentStatusEnum[PaymentStatusEnum["CONFIRMED"] = 'CONFIRMED'] = "CONFIRMED";
    })(PaymentStatusEnum = OrderEntryDto.PaymentStatusEnum || (OrderEntryDto.PaymentStatusEnum = {}));
})(OrderEntryDto || (OrderEntryDto = {}));
/**
 * @export
 * @namespace OrderViewResponse
 */
export var OrderViewResponse;
(function (OrderViewResponse) {
    /**
     * @export
     * @enum {string}
     */
    var OrderStateEnum;
    (function (OrderStateEnum) {
        OrderStateEnum[OrderStateEnum["CREATED"] = 'CREATED'] = "CREATED";
        OrderStateEnum[OrderStateEnum["ORDERING"] = 'ORDERING'] = "ORDERING";
        OrderStateEnum[OrderStateEnum["ORDERED"] = 'ORDERED'] = "ORDERED";
        OrderStateEnum[OrderStateEnum["DELIVERED"] = 'DELIVERED'] = "DELIVERED";
        OrderStateEnum[OrderStateEnum["REJECTED"] = 'REJECTED'] = "REJECTED";
    })(OrderStateEnum = OrderViewResponse.OrderStateEnum || (OrderViewResponse.OrderStateEnum = {}));
})(OrderViewResponse || (OrderViewResponse = {}));
/**
 * @export
 * @namespace ParticipantsOrderEntry
 */
export var ParticipantsOrderEntry;
(function (ParticipantsOrderEntry) {
    /**
     * @export
     * @enum {string}
     */
    var PaymentStatusEnum;
    (function (PaymentStatusEnum) {
        PaymentStatusEnum[PaymentStatusEnum["UNPAID"] = 'UNPAID'] = "UNPAID";
        PaymentStatusEnum[PaymentStatusEnum["MARKED"] = 'MARKED'] = "MARKED";
        PaymentStatusEnum[PaymentStatusEnum["CONFIRMED"] = 'CONFIRMED'] = "CONFIRMED";
    })(PaymentStatusEnum = ParticipantsOrderEntry.PaymentStatusEnum || (ParticipantsOrderEntry.PaymentStatusEnum = {}));
})(ParticipantsOrderEntry || (ParticipantsOrderEntry = {}));
/**
 * @export
 * @namespace ShowOrderDto
 */
export var ShowOrderDto;
(function (ShowOrderDto) {
    /**
     * @export
     * @enum {string}
     */
    var OrderStateEnum;
    (function (OrderStateEnum) {
        OrderStateEnum[OrderStateEnum["CREATED"] = 'CREATED'] = "CREATED";
        OrderStateEnum[OrderStateEnum["ORDERING"] = 'ORDERING'] = "ORDERING";
        OrderStateEnum[OrderStateEnum["ORDERED"] = 'ORDERED'] = "ORDERED";
        OrderStateEnum[OrderStateEnum["DELIVERED"] = 'DELIVERED'] = "DELIVERED";
        OrderStateEnum[OrderStateEnum["REJECTED"] = 'REJECTED'] = "REJECTED";
    })(OrderStateEnum = ShowOrderDto.OrderStateEnum || (ShowOrderDto.OrderStateEnum = {}));
})(ShowOrderDto || (ShowOrderDto = {}));
/**
 * @export
 * @namespace TodayOrderDto
 */
export var TodayOrderDto;
(function (TodayOrderDto) {
    /**
     * @export
     * @enum {string}
     */
    var OrderStateEnum;
    (function (OrderStateEnum) {
        OrderStateEnum[OrderStateEnum["CREATED"] = 'CREATED'] = "CREATED";
        OrderStateEnum[OrderStateEnum["ORDERING"] = 'ORDERING'] = "ORDERING";
        OrderStateEnum[OrderStateEnum["ORDERED"] = 'ORDERED'] = "ORDERED";
        OrderStateEnum[OrderStateEnum["DELIVERED"] = 'DELIVERED'] = "DELIVERED";
        OrderStateEnum[OrderStateEnum["REJECTED"] = 'REJECTED'] = "REJECTED";
    })(OrderStateEnum = TodayOrderDto.OrderStateEnum || (TodayOrderDto.OrderStateEnum = {}));
})(TodayOrderDto || (TodayOrderDto = {}));
/**
 * DishControllerApi - fetch parameter creator
 * @export
 */
export var DishControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDish: function (restaurantId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling createDish.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/dishes/create.json"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} dishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDish: function (dishId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dishId' is not null or undefined
            if (dishId === null || dishId === undefined) {
                throw new RequiredError('dishId', 'Required parameter dishId was null or undefined when calling deleteDish.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/dishes/{dishId}/delete"
                .replace("{" + "dishId" + "}", encodeURIComponent(String(dishId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} dishId
         * @param {string} sideDishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSideDish: function (dishId, sideDishId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'dishId' is not null or undefined
            if (dishId === null || dishId === undefined) {
                throw new RequiredError('dishId', 'Required parameter dishId was null or undefined when calling deleteSideDish.');
            }
            // verify required parameter 'sideDishId' is not null or undefined
            if (sideDishId === null || sideDishId === undefined) {
                throw new RequiredError('sideDishId', 'Required parameter sideDishId was null or undefined when calling deleteSideDish.');
            }
            var localVarPath = "/api/dishes/{dishId}/side_dishes/{sideDishId}/delete"
                .replace("{" + "dishId" + "}", encodeURIComponent(String(dishId)))
                .replace("{" + "sideDishId" + "}", encodeURIComponent(String(sideDishId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} restaurantId
         * @param {string} dishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDish: function (restaurantId, dishId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling editDish.');
            }
            // verify required parameter 'dishId' is not null or undefined
            if (dishId === null || dishId === undefined) {
                throw new RequiredError('dishId', 'Required parameter dishId was null or undefined when calling editDish.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/dishes/{dishId}/edit.json"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)))
                .replace("{" + "dishId" + "}", encodeURIComponent(String(dishId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {DishCreateRequest} body
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDish: function (body, restaurantId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling saveDish.');
            }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling saveDish.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/dishes/save"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DishCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {DishUpdateRequest} body
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDish: function (body, restaurantId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateDish.');
            }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling updateDish.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/dishes/update"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("DishUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DishControllerApi - functional programming interface
 * @export
 */
export var DishControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDish: function (restaurantId, options) {
            var localVarFetchArgs = DishControllerApiFetchParamCreator(configuration).createDish(restaurantId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} dishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDish: function (dishId, options) {
            var localVarFetchArgs = DishControllerApiFetchParamCreator(configuration).deleteDish(dishId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} dishId
         * @param {string} sideDishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSideDish: function (dishId, sideDishId, options) {
            var localVarFetchArgs = DishControllerApiFetchParamCreator(configuration).deleteSideDish(dishId, sideDishId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} restaurantId
         * @param {string} dishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDish: function (restaurantId, dishId, options) {
            var localVarFetchArgs = DishControllerApiFetchParamCreator(configuration).editDish(restaurantId, dishId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {DishCreateRequest} body
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDish: function (body, restaurantId, options) {
            var localVarFetchArgs = DishControllerApiFetchParamCreator(configuration).saveDish(body, restaurantId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {DishUpdateRequest} body
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDish: function (body, restaurantId, options) {
            var localVarFetchArgs = DishControllerApiFetchParamCreator(configuration).updateDish(body, restaurantId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DishControllerApi - factory interface
 * @export
 */
export var DishControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDish: function (restaurantId, options) {
            return DishControllerApiFp(configuration).createDish(restaurantId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} dishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDish: function (dishId, options) {
            return DishControllerApiFp(configuration).deleteDish(dishId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} dishId
         * @param {string} sideDishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSideDish: function (dishId, sideDishId, options) {
            return DishControllerApiFp(configuration).deleteSideDish(dishId, sideDishId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} restaurantId
         * @param {string} dishId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editDish: function (restaurantId, dishId, options) {
            return DishControllerApiFp(configuration).editDish(restaurantId, dishId, options)(fetch, basePath);
        },
        /**
         *
         * @param {DishCreateRequest} body
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveDish: function (body, restaurantId, options) {
            return DishControllerApiFp(configuration).saveDish(body, restaurantId, options)(fetch, basePath);
        },
        /**
         *
         * @param {DishUpdateRequest} body
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDish: function (body, restaurantId, options) {
            return DishControllerApiFp(configuration).updateDish(body, restaurantId, options)(fetch, basePath);
        },
    };
};
/**
 * DishControllerApi - object-oriented interface
 * @export
 * @class DishControllerApi
 * @extends {BaseAPI}
 */
var DishControllerApi = /** @class */ (function (_super) {
    __extends(DishControllerApi, _super);
    function DishControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} restaurantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DishControllerApi
     */
    DishControllerApi.prototype.createDish = function (restaurantId, options) {
        return DishControllerApiFp(this.configuration).createDish(restaurantId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} dishId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DishControllerApi
     */
    DishControllerApi.prototype.deleteDish = function (dishId, options) {
        return DishControllerApiFp(this.configuration).deleteDish(dishId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} dishId
     * @param {string} sideDishId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DishControllerApi
     */
    DishControllerApi.prototype.deleteSideDish = function (dishId, sideDishId, options) {
        return DishControllerApiFp(this.configuration).deleteSideDish(dishId, sideDishId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} restaurantId
     * @param {string} dishId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DishControllerApi
     */
    DishControllerApi.prototype.editDish = function (restaurantId, dishId, options) {
        return DishControllerApiFp(this.configuration).editDish(restaurantId, dishId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {DishCreateRequest} body
     * @param {string} restaurantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DishControllerApi
     */
    DishControllerApi.prototype.saveDish = function (body, restaurantId, options) {
        return DishControllerApiFp(this.configuration).saveDish(body, restaurantId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {DishUpdateRequest} body
     * @param {string} restaurantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DishControllerApi
     */
    DishControllerApi.prototype.updateDish = function (body, restaurantId, options) {
        return DishControllerApiFp(this.configuration).updateDish(body, restaurantId, options)(this.fetch, this.basePath);
    };
    return DishControllerApi;
}(BaseAPI));
export { DishControllerApi };
/**
 * OrderControllerApi - fetch parameter creator
 * @export
 */
export var OrderControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling _delete.');
            }
            var localVarPath = "/api/orders/{orderId}/delete"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allOrders: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/orders/all.json";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/orders/create.json";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        edit: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling edit.');
            }
            var localVarPath = "/api/orders/{orderId}/edit.json"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderViewJson: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling orderViewJson.');
            }
            var localVarPath = "/api/orders/{orderId}/order_view.json"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OrderSaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling save.');
            }
            var localVarPath = "/api/orders/save";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderSaveRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsCreated: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling setAsCreated.');
            }
            var localVarPath = "/api/orders/{orderId}/set_as_created"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsDelivered: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling setAsDelivered.');
            }
            var localVarPath = "/api/orders/{orderId}/set_as_delivered"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SetAsOrderedResponse} body
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsOrdered: function (body, orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling setAsOrdered.');
            }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling setAsOrdered.');
            }
            var localVarPath = "/api/orders/{orderId}/set_as_ordered"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("SetAsOrderedResponse" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsOrdering: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling setAsOrdering.');
            }
            var localVarPath = "/api/orders/{orderId}/set_as_ordering"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsRejected: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling setAsRejected.');
            }
            var localVarPath = "/api/orders/{orderId}/set_as_rejected"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBackAsOrdered: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling setBackAsOrdered.');
            }
            var localVarPath = "/api/orders/{orderId}/set_back_as_ordered"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show: function (orderId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId', 'Required parameter orderId was null or undefined when calling show.');
            }
            var localVarPath = "/api/orders/{orderId}/show.json"
                .replace("{" + "orderId" + "}", encodeURIComponent(String(orderId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todayOrders: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/orders/today.json";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OrderUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling update.');
            }
            var localVarPath = "/api/orders/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrderControllerApi - functional programming interface
 * @export
 */
export var OrderControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration)._delete(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allOrders: function (options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).allOrders(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).create(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        edit: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).edit(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderViewJson: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).orderViewJson(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {OrderSaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: function (body, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).save(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsCreated: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).setAsCreated(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsDelivered: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).setAsDelivered(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {SetAsOrderedResponse} body
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsOrdered: function (body, orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).setAsOrdered(body, orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsOrdering: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).setAsOrdering(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsRejected: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).setAsRejected(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBackAsOrdered: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).setBackAsOrdered(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show: function (orderId, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).show(orderId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todayOrders: function (options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).todayOrders(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {OrderUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: function (body, options) {
            var localVarFetchArgs = OrderControllerApiFetchParamCreator(configuration).update(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrderControllerApi - factory interface
 * @export
 */
export var OrderControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (orderId, options) {
            return OrderControllerApiFp(configuration)._delete(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allOrders: function (options) {
            return OrderControllerApiFp(configuration).allOrders(options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: function (options) {
            return OrderControllerApiFp(configuration).create(options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        edit: function (orderId, options) {
            return OrderControllerApiFp(configuration).edit(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderViewJson: function (orderId, options) {
            return OrderControllerApiFp(configuration).orderViewJson(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {OrderSaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save: function (body, options) {
            return OrderControllerApiFp(configuration).save(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsCreated: function (orderId, options) {
            return OrderControllerApiFp(configuration).setAsCreated(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsDelivered: function (orderId, options) {
            return OrderControllerApiFp(configuration).setAsDelivered(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {SetAsOrderedResponse} body
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsOrdered: function (body, orderId, options) {
            return OrderControllerApiFp(configuration).setAsOrdered(body, orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsOrdering: function (orderId, options) {
            return OrderControllerApiFp(configuration).setAsOrdering(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsRejected: function (orderId, options) {
            return OrderControllerApiFp(configuration).setAsRejected(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBackAsOrdered: function (orderId, options) {
            return OrderControllerApiFp(configuration).setBackAsOrdered(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show: function (orderId, options) {
            return OrderControllerApiFp(configuration).show(orderId, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todayOrders: function (options) {
            return OrderControllerApiFp(configuration).todayOrders(options)(fetch, basePath);
        },
        /**
         *
         * @param {OrderUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: function (body, options) {
            return OrderControllerApiFp(configuration).update(body, options)(fetch, basePath);
        },
    };
};
/**
 * OrderControllerApi - object-oriented interface
 * @export
 * @class OrderControllerApi
 * @extends {BaseAPI}
 */
var OrderControllerApi = /** @class */ (function (_super) {
    __extends(OrderControllerApi, _super);
    function OrderControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype._delete = function (orderId, options) {
        return OrderControllerApiFp(this.configuration)._delete(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.allOrders = function (options) {
        return OrderControllerApiFp(this.configuration).allOrders(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.create = function (options) {
        return OrderControllerApiFp(this.configuration).create(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.edit = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).edit(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.orderViewJson = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).orderViewJson(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {OrderSaveRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.save = function (body, options) {
        return OrderControllerApiFp(this.configuration).save(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.setAsCreated = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).setAsCreated(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.setAsDelivered = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).setAsDelivered(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {SetAsOrderedResponse} body
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.setAsOrdered = function (body, orderId, options) {
        return OrderControllerApiFp(this.configuration).setAsOrdered(body, orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.setAsOrdering = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).setAsOrdering(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.setAsRejected = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).setAsRejected(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.setBackAsOrdered = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).setBackAsOrdered(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.show = function (orderId, options) {
        return OrderControllerApiFp(this.configuration).show(orderId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.todayOrders = function (options) {
        return OrderControllerApiFp(this.configuration).todayOrders(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {OrderUpdateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    OrderControllerApi.prototype.update = function (body, options) {
        return OrderControllerApiFp(this.configuration).update(body, options)(this.fetch, this.basePath);
    };
    return OrderControllerApi;
}(BaseAPI));
export { OrderControllerApi };
/**
 * OrderEntryControllerApi - fetch parameter creator
 * @export
 */
export var OrderEntryControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} orderEntryId
         * @param {string} dishEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: function (orderEntryId, dishEntryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderEntryId' is not null or undefined
            if (orderEntryId === null || orderEntryId === undefined) {
                throw new RequiredError('orderEntryId', 'Required parameter orderEntryId was null or undefined when calling delete1.');
            }
            // verify required parameter 'dishEntryId' is not null or undefined
            if (dishEntryId === null || dishEntryId === undefined) {
                throw new RequiredError('dishEntryId', 'Required parameter dishEntryId was null or undefined when calling delete1.');
            }
            var localVarPath = "/api/order_entries/{orderEntryId}/dish_entry/{dishEntryId}/delete"
                .replace("{" + "orderEntryId" + "}", encodeURIComponent(String(orderEntryId)))
                .replace("{" + "dishEntryId" + "}", encodeURIComponent(String(dishEntryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OrderEntrySaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling save1.');
            }
            var localVarPath = "/api/order_entries/save";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderEntrySaveRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsConfirmedAsPaid: function (orderEntryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderEntryId' is not null or undefined
            if (orderEntryId === null || orderEntryId === undefined) {
                throw new RequiredError('orderEntryId', 'Required parameter orderEntryId was null or undefined when calling setAsConfirmedAsPaid.');
            }
            var localVarPath = "/api/order_entries/{orderEntryId}/confirm_as_paid"
                .replace("{" + "orderEntryId" + "}", encodeURIComponent(String(orderEntryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} orderEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsMarkedAsPaid: function (orderEntryId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'orderEntryId' is not null or undefined
            if (orderEntryId === null || orderEntryId === undefined) {
                throw new RequiredError('orderEntryId', 'Required parameter orderEntryId was null or undefined when calling setAsMarkedAsPaid.');
            }
            var localVarPath = "/api/order_entries/{orderEntryId}/mark_as_paid"
                .replace("{" + "orderEntryId" + "}", encodeURIComponent(String(orderEntryId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {OrderEntryUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling update1.');
            }
            var localVarPath = "/api/order_entries/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("OrderEntryUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrderEntryControllerApi - functional programming interface
 * @export
 */
export var OrderEntryControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} orderEntryId
         * @param {string} dishEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: function (orderEntryId, dishEntryId, options) {
            var localVarFetchArgs = OrderEntryControllerApiFetchParamCreator(configuration).delete1(orderEntryId, dishEntryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {OrderEntrySaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1: function (body, options) {
            var localVarFetchArgs = OrderEntryControllerApiFetchParamCreator(configuration).save1(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsConfirmedAsPaid: function (orderEntryId, options) {
            var localVarFetchArgs = OrderEntryControllerApiFetchParamCreator(configuration).setAsConfirmedAsPaid(orderEntryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} orderEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsMarkedAsPaid: function (orderEntryId, options) {
            var localVarFetchArgs = OrderEntryControllerApiFetchParamCreator(configuration).setAsMarkedAsPaid(orderEntryId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {OrderEntryUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: function (body, options) {
            var localVarFetchArgs = OrderEntryControllerApiFetchParamCreator(configuration).update1(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * OrderEntryControllerApi - factory interface
 * @export
 */
export var OrderEntryControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} orderEntryId
         * @param {string} dishEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: function (orderEntryId, dishEntryId, options) {
            return OrderEntryControllerApiFp(configuration).delete1(orderEntryId, dishEntryId, options)(fetch, basePath);
        },
        /**
         *
         * @param {OrderEntrySaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        save1: function (body, options) {
            return OrderEntryControllerApiFp(configuration).save1(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsConfirmedAsPaid: function (orderEntryId, options) {
            return OrderEntryControllerApiFp(configuration).setAsConfirmedAsPaid(orderEntryId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} orderEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAsMarkedAsPaid: function (orderEntryId, options) {
            return OrderEntryControllerApiFp(configuration).setAsMarkedAsPaid(orderEntryId, options)(fetch, basePath);
        },
        /**
         *
         * @param {OrderEntryUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: function (body, options) {
            return OrderEntryControllerApiFp(configuration).update1(body, options)(fetch, basePath);
        },
    };
};
/**
 * OrderEntryControllerApi - object-oriented interface
 * @export
 * @class OrderEntryControllerApi
 * @extends {BaseAPI}
 */
var OrderEntryControllerApi = /** @class */ (function (_super) {
    __extends(OrderEntryControllerApi, _super);
    function OrderEntryControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} orderEntryId
     * @param {string} dishEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntryControllerApi
     */
    OrderEntryControllerApi.prototype.delete1 = function (orderEntryId, dishEntryId, options) {
        return OrderEntryControllerApiFp(this.configuration).delete1(orderEntryId, dishEntryId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {OrderEntrySaveRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntryControllerApi
     */
    OrderEntryControllerApi.prototype.save1 = function (body, options) {
        return OrderEntryControllerApiFp(this.configuration).save1(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntryControllerApi
     */
    OrderEntryControllerApi.prototype.setAsConfirmedAsPaid = function (orderEntryId, options) {
        return OrderEntryControllerApiFp(this.configuration).setAsConfirmedAsPaid(orderEntryId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} orderEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntryControllerApi
     */
    OrderEntryControllerApi.prototype.setAsMarkedAsPaid = function (orderEntryId, options) {
        return OrderEntryControllerApiFp(this.configuration).setAsMarkedAsPaid(orderEntryId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {OrderEntryUpdateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderEntryControllerApi
     */
    OrderEntryControllerApi.prototype.update1 = function (body, options) {
        return OrderEntryControllerApiFp(this.configuration).update1(body, options)(this.fetch, this.basePath);
    };
    return OrderEntryControllerApi;
}(BaseAPI));
export { OrderEntryControllerApi };
/**
 * RestaurantControllerApi - fetch parameter creator
 * @export
 */
export var RestaurantControllerApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant: function (restaurantId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling deleteRestaurant.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/delete"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRestaurant: function (restaurantId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling editRestaurant.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/edit.json"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexRestaurants: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/restaurants.json";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {RestaurantSaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRestaurant: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling saveRestaurant.');
            }
            var localVarPath = "/api/restaurants/save";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RestaurantSaveRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRestaurant: function (restaurantId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'restaurantId' is not null or undefined
            if (restaurantId === null || restaurantId === undefined) {
                throw new RequiredError('restaurantId', 'Required parameter restaurantId was null or undefined when calling showRestaurant.');
            }
            var localVarPath = "/api/restaurants/{restaurantId}/show.json"
                .replace("{" + "restaurantId" + "}", encodeURIComponent(String(restaurantId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {RestaurantUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling updateRestaurant.');
            }
            var localVarPath = "/api/restaurants/update";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("RestaurantUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RestaurantControllerApi - functional programming interface
 * @export
 */
export var RestaurantControllerApiFp = function (configuration) {
    return {
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant: function (restaurantId, options) {
            var localVarFetchArgs = RestaurantControllerApiFetchParamCreator(configuration).deleteRestaurant(restaurantId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRestaurant: function (restaurantId, options) {
            var localVarFetchArgs = RestaurantControllerApiFetchParamCreator(configuration).editRestaurant(restaurantId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexRestaurants: function (options) {
            var localVarFetchArgs = RestaurantControllerApiFetchParamCreator(configuration).indexRestaurants(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {RestaurantSaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRestaurant: function (body, options) {
            var localVarFetchArgs = RestaurantControllerApiFetchParamCreator(configuration).saveRestaurant(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRestaurant: function (restaurantId, options) {
            var localVarFetchArgs = RestaurantControllerApiFetchParamCreator(configuration).showRestaurant(restaurantId, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {RestaurantUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant: function (body, options) {
            var localVarFetchArgs = RestaurantControllerApiFetchParamCreator(configuration).updateRestaurant(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RestaurantControllerApi - factory interface
 * @export
 */
export var RestaurantControllerApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurant: function (restaurantId, options) {
            return RestaurantControllerApiFp(configuration).deleteRestaurant(restaurantId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editRestaurant: function (restaurantId, options) {
            return RestaurantControllerApiFp(configuration).editRestaurant(restaurantId, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexRestaurants: function (options) {
            return RestaurantControllerApiFp(configuration).indexRestaurants(options)(fetch, basePath);
        },
        /**
         *
         * @param {RestaurantSaveRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveRestaurant: function (body, options) {
            return RestaurantControllerApiFp(configuration).saveRestaurant(body, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} restaurantId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showRestaurant: function (restaurantId, options) {
            return RestaurantControllerApiFp(configuration).showRestaurant(restaurantId, options)(fetch, basePath);
        },
        /**
         *
         * @param {RestaurantUpdateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRestaurant: function (body, options) {
            return RestaurantControllerApiFp(configuration).updateRestaurant(body, options)(fetch, basePath);
        },
    };
};
/**
 * RestaurantControllerApi - object-oriented interface
 * @export
 * @class RestaurantControllerApi
 * @extends {BaseAPI}
 */
var RestaurantControllerApi = /** @class */ (function (_super) {
    __extends(RestaurantControllerApi, _super);
    function RestaurantControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} restaurantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantControllerApi
     */
    RestaurantControllerApi.prototype.deleteRestaurant = function (restaurantId, options) {
        return RestaurantControllerApiFp(this.configuration).deleteRestaurant(restaurantId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} restaurantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantControllerApi
     */
    RestaurantControllerApi.prototype.editRestaurant = function (restaurantId, options) {
        return RestaurantControllerApiFp(this.configuration).editRestaurant(restaurantId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantControllerApi
     */
    RestaurantControllerApi.prototype.indexRestaurants = function (options) {
        return RestaurantControllerApiFp(this.configuration).indexRestaurants(options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {RestaurantSaveRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantControllerApi
     */
    RestaurantControllerApi.prototype.saveRestaurant = function (body, options) {
        return RestaurantControllerApiFp(this.configuration).saveRestaurant(body, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {string} restaurantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantControllerApi
     */
    RestaurantControllerApi.prototype.showRestaurant = function (restaurantId, options) {
        return RestaurantControllerApiFp(this.configuration).showRestaurant(restaurantId, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @param {RestaurantUpdateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantControllerApi
     */
    RestaurantControllerApi.prototype.updateRestaurant = function (body, options) {
        return RestaurantControllerApiFp(this.configuration).updateRestaurant(body, options)(this.fetch, this.basePath);
    };
    return RestaurantControllerApi;
}(BaseAPI));
export { RestaurantControllerApi };
//# sourceMappingURL=api.js.map